---
date: Last Modified
---

<!DOCTYPE html>
<html lang="en" data-mode="auto">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{ title }}</title>
  <link rel="icon" href="/favicon.svg" type="image/svg+xml">
  <link rel="stylesheet" href="{{ '/css/style.css' | url }}" />

  {% if redirect -%}
    <meta http-equiv="refresh" content="0; URL={{ redirect.to }}" />
    <meta name="robots" content="noindex">
  {%- endif %}
</head>
<body>
  {% include "base/nav.njk" %}

  <header>
    <h1>{{ title | mdInline | safe }}</h1>

    {% if tags %}
      {% set updated = collections[index] | latest
        if index
        else collections.all | getPage(page) | getDate
      %}
      <time datetime="{{ updated.toISOString() }}">
        Updated {{ updated.toLocaleString('en-US', {'dateStyle': 'medium'}) }}
      </time>
    {% endif %}

    {% if content | toc %}
      <details id="toc-details">
        <summary class="toc-summary">Table of Contents</summary>
        {{ content | toc | safe }}
      </details>
    {% endif %}
  </header>

  <main>
    {{ content | typogr | safe }}
  </main>

  {% include "base/support.njk" %}
  {% include "base/changes.njk" %}

  <footer>
    {% include "base/footer.njk" %}
  </footer>

  <script>
    const modeRoot = document.querySelector('[data-mode]');
    const modeToggle = document.querySelector('[data-toggle=mode]');

    if (modeToggle && modeRoot) {
      const autoMode = window.matchMedia('(prefers-color-scheme: dark)').matches
        ? 'dark' : 'light';
      const userMode = window.localStorage.getItem('mode') || autoMode;
      const htmlMode = () => {
        return modeRoot.getAttribute('data-mode');
      }

      const isValidMode = (mode) => {
        return mode && ['light', 'dark', 'auto'].includes(mode);
      }

      const updateStore = (to) => {
        if (to === 'auto') {
          window.localStorage.removeItem('mode');
        } else {
          window.localStorage.setItem('mode', to);
        }
      }

      const updateToggles = (to) => {
        [...modeToggle.children].forEach((btn) => {
          if (btn.getAttribute('data-mode') === to) {
            btn.setAttribute('aria-pressed', 'true');
          } else {
            btn.setAttribute('aria-pressed', 'false');
          }
        });
      }

      const setMode = (to, store=true) => {
        const setTo = to === 'auto' ? autoMode : to;

        if (isValidMode(setTo)) {
          modeRoot.setAttribute('data-mode', setTo);
          updateToggles(setTo);
          if (store) {
            updateStore(setTo);
          }
        } else {
          console.error(`Unknown color scheme: ${setTo}`);
        }
      };

      // initial setting
      setMode(userMode, false);

      // events
      [...modeToggle.children].forEach((btn) => {
        btn.addEventListener('click', (event) => {
          event.preventDefault();
          const setTo = btn.getAttribute("data-mode");
          setMode(setTo);
        });
      });
    }
  </script>
</body>
</html>
